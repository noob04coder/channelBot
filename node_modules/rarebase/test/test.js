const assert = require('assert');
const fs = require('fs')
const path = require('path')
const fixture = require('./fixture')
const Rarebase = require('../index')
const trade = require('./trade_fixture')
var rarebase
describe('token', function() {
  before(async function() {
    await fs.promises.unlink(path.resolve(__dirname, "rarebase.sqlite3")).catch((e) => { })
    rarebase = new Rarebase() 
    await rarebase.init({
      client: "sqlite3",
      connection: {
        filename: __dirname + "/rarebase.sqlite3"
      }
    })
  })
  beforeEach(async () => {
    await rarebase.knex("creators").del()
    await rarebase.knex("trades").del()
    await rarebase.knex("tokens").del()
    const mutable = JSON.parse(JSON.stringify(fixture))
    for(let item of mutable) {
      await rarebase.token.insert(item)
    }
  })
  describe('trades table', () => {
    describe('utility functions', () => {
      it('normalize() lowercases everything correctly', () => {
        let t = JSON.parse(JSON.stringify(trade))
        t.make.assetType.creators[0].account = t.make.assetType.creators[0].account.toUpperCase()
        t.maker = t.maker.toUpperCase()
        let normalized = rarebase.trade.normalize(t)
        assert.notEqual(normalized.make.assetType.creators[0].account, trade.make.assetType.creators[0].account)
        assert.equal(normalized.make.assetType.creators[0].account, trade.make.assetType.creators[0].account.toLowerCase())
        assert.notEqual(normalized.maker, trade.maker)
        assert.equal(normalized.maker, trade.maker.toLowerCase())
      })
      it('validate() throws if there is neither make nor take position', () => {
        let t = JSON.parse(JSON.stringify(trade))
        delete t.make
        delete t.take
        assert.throws(() => {
          rarebase.trade.validate(t)
        }, (err) => {
          assert.equal(err.message, "must have at least 'make' or 'take' attribute")
          return true
        })
      })
      it('validate() throws if theres no signature', () => {
        let t = JSON.parse(JSON.stringify(trade))
        delete t.signature
        assert.throws(() => {
          rarebase.trade.validate(t)
        }, (err) => {
          assert.equal(err.message, "signature required")
          return true
        })
      })
      it('validateDiff(a, b) throws if b has been mutated from a', () => {
        let oldTrade = trade
        // should be valid when there are no changes
        let newTrade = JSON.parse(JSON.stringify(trade))
        assert.doesNotThrow(() => {
          rarebase.trade.validateDiff(oldTrade, newTrade)
        }, (err) => {
          return true
        })

        // shouldn't allow change in make assetType
        newTrade = JSON.parse(JSON.stringify(trade))
        newTrade.make.assetType.assetClass = "ERC721_LAZY"
        assert.throws(() => {
          rarebase.trade.validateDiff(oldTrade, newTrade)
        }, (err) => {
          assert.equal(err.message, "the contents have the trade have been mutated")
          return true
        })

        // shouldn't allow change in creators and royalties
        newTrade = JSON.parse(JSON.stringify(trade))
        newTrade.make.assetType.creators[0].account = "random address"
        assert.throws(() => {
          rarebase.trade.validateDiff(oldTrade, newTrade)
        }, (err) => {
          assert.equal(err.message, "the contents have the trade have been mutated")
          return true
        })

        // shouldn't allow change in data
        newTrade = JSON.parse(JSON.stringify(trade))
        newTrade.data.payouts = [ "random" ]
        assert.throws(() => {
          rarebase.trade.validateDiff(oldTrade, newTrade)
        }, (err) => {
          assert.equal(err.message, "the contents have the trade have been mutated")
          return true
        })

      })
    })
    describe('db functions', () => {
      it('get()', async () => {
        await rarebase.trade.save(trade)
        let items = await rarebase.trade.query({
          where: {
            maker: trade.maker
          }
        })
        assert(Array.isArray(items))
        assert.equal(items.length, 1)
        assert.equal(items[0].maker, trade.maker)
      })
      it('should delete items correctly', async () => {
        let items = await rarebase.trade.query({})
        assert.equal(items.length, 0)
        await rarebase.trade.save(trade)
        
        items = await rarebase.trade.query({})
        assert.equal(items.length, 1)

        await rarebase.trade.del({
          maker: trade.maker
        })
        items = await rarebase.trade.query({})
        assert.equal(items.length, 0)
      })
      it('should delete all matching items, not just one', async () => {
        let items = await rarebase.trade.query({})
        assert.equal(items.length, 0)

        for(let i=0; i<10; i++) {
          let t = JSON.parse(JSON.stringify(trade))
          t.maker = "maker" + i
          await rarebase.trade.save(t)
        }
        
        items = await rarebase.trade.query({})
        assert.equal(items.length, 10)

        await rarebase.trade.del({
          makeId: trade.make.assetType.tokenId
        })
        items = await rarebase.trade.query({})
        assert.equal(items.length, 0)
      })
      it('should delete only the matching items', async () => {
        let items = await rarebase.trade.query({})
        assert.equal(items.length, 0)

        for(let i=0; i<10; i++) {
          let t = JSON.parse(JSON.stringify(trade))
          t.maker = "maker" + i
          await rarebase.trade.save(t)
        }
        
        items = await rarebase.trade.query({})
        assert.equal(items.length, 10)

        await rarebase.trade.del({
          maker: "maker7"
        })
        items = await rarebase.trade.query({})
        assert.equal(items.length, 9)
      })
      it('trade.save() + trade.query()', async () => {
        let items = await rarebase.trade.query({})
        assert.equal(items.length, 0)
        
        await rarebase.trade.save(trade)

        // query
        items = await rarebase.trade.query({
          where: { maker: trade.maker }
        })
        assert.equal(items.length, 1)

        // check key existence
        let keys = ["makeId", "takeId", "maker", "taker", "body", "created_at", "makeType", "takeType"]
        for(let key of keys) {
          assert(typeof items[0][key] !== "undefined")
        }

        // check values
        assert.equal(items[0].makeId, trade.make.assetType.tokenId)
        assert.equal(items[0].maker, trade.maker)

        assert.equal(items[0].makeType, "ERC1155_LAZY.0x1af7a7555263f275433c6bb0b8fdcd231f89b1d7")
        assert.equal(items[0].takeType, "ETH")
        assert.equal(items[0].takeId, null)
        assert.equal(items[0].taker, null)

        // check non-existence of keys
        assert.equal(items[0].updated_at, undefined)

      })
      it('trade.save() should only save if the entry is new', async () => {
        let items = await rarebase.trade.query({})
        assert.equal(items.length, 0)
        
        // insert trade. the table should have 1 entry afterwards
        await rarebase.trade.save(trade)
        items = await rarebase.trade.query({
          where: { maker: trade.maker }
        })
        assert.equal(items.length, 1)

        // insert the same trade. The same trade should be ignored and the table should
        // still have 1 entry
        await rarebase.trade.save(trade)
        items = await rarebase.trade.query({
          where: { maker: trade.maker }
        })
        assert.equal(items.length, 1)

      })
      it('trade.save() makeType and takeType schema check', async () => {
        
        // Default: ERC1155_LAZY to ETH
        let stub = JSON.parse(JSON.stringify(trade))
        await rarebase.trade.save(stub)
        let item = await rarebase.trade.queryOne({
          where: { maker: stub.maker }
        })
        assert.equal(item.makeType, "ERC1155_LAZY." + "0x1AF7A7555263F275433c6Bb0b8FdCD231F89B1D7".toLowerCase())
        assert.equal(item.takeType, "ETH")

        // ERC1155_LAZY to ERC20
        stub = JSON.parse(JSON.stringify(trade))
        stub.take.assetType.assetClass = "ERC20"
        stub.take.assetType.contract = "0xABCD"
        await rarebase.trade.save(stub)
        // get the most recent one
        let items = await rarebase.trade.query({
          where: { maker: stub.maker },
        })
        assert.equal(items.length, 2)
        assert.equal(items[1].makeType, "ERC1155_LAZY." + "0x1AF7A7555263F275433c6Bb0b8FdCD231F89B1D7".toLowerCase())
        assert.equal(items[1].takeType, "ERC20." + "0xABCD".toLowerCase())

        // ERC721_LAZY to ERC721_LAZY
        stub = JSON.parse(JSON.stringify(trade))
        stub.make.assetType.assetClass = "ERC721_LAZY"
        stub.make.assetType.contract = "0x123"
        stub.take.assetType.assetClass = "ERC721_LAZY"
        stub.take.assetType.contract = "0x456"
        await rarebase.trade.save(stub)
        items = await rarebase.trade.query({
          where: { maker: stub.maker },
        })
        assert.equal(items.length, 3)
        assert.equal(items[2].makeType, "ERC721_LAZY.0x123")
        assert.equal(items[2].takeType, "ERC721_LAZY.0x456")
      })

    })
  })
  describe('creators table', () => {
    it('should set "signed" to true when inserting signed tokens for the first time', async () => {
      let items = await rarebase.token.query({
        join: ["creators", "tokens.tokenId", "creators.tokenId"],
        where: {}
      })
      let signed = items.map((item) => {
        return item.signed
      })
      for(let item of signed) {
        assert(item)
      }
    })
    it('should set "signed" to false if a token doesnt have a signature', async () => {
      const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
      token.signatures = [ null ]
      await rarebase.token.insert(token)
      let t = await rarebase.token.queryOne({
        where: { "tokens.tokenId": token.tokenId },
        join: ["creators", "tokens.tokenId", "creators.tokenId"],
      })
      assert.equal(t.signed, false)
    })
    it('gets all user tokens when filtering with address', async () => {
      // the fixture contains only one token from 0x633
      let items = await rarebase.token.query({
        join: ["creators", "tokens.tokenId", "creators.tokenId"],
        where: { address: "0x63316d4224263496201c3420b36cdda9c0249574" },
      })
      assert.equal(items.length, 1)
      // add another toekn from 0x633 and check to make sure it's 2
      const token = {"@type":"ERC721","tokenId":"44866301589432752780997241314220913855308248374281059505648362277690532691969","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x63316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x63316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
      await rarebase.token.insert(token)
      items = await rarebase.token.query({
        join: ["creators", "tokens.tokenId", "creators.tokenId"],
        where: { address: "0x63316d4224263496201c3420b36cdda9c0249574" },
      })
      assert.equal(items.length, 2)
    })
    it('where filters out based on timestamps', async () => {
      let items = await rarebase.token.query({
        join: ["creators", "tokens.tokenId", "creators.tokenId"],
        limit: 3,
        order: ["created_at", "desc"],
      })
      let cutoff = items[2].created_at

      // query from cutoff point
      items = await rarebase.token.query({
        join: ["creators", "tokens.tokenId", "creators.tokenId"],
        where: ["tokens.created_at", ">=", cutoff]
      })
      assert.equal(items.length, 3)

    })
    it('sort correctly', async () => {
      // descending sort
      let items = await rarebase.token.query({
        join: ["creators", "tokens.tokenId", "creators.tokenId"],
        limit: 3,
        order: ["created_at", "desc"],
      })
      let timestamps = items.map((item) => {
        return item.created_at
      })
      assert(timestamps[0] > timestamps[1] && timestamps[1] > timestamps[2])

      // ascending sort
      items = await rarebase.token.query({
        join: ["creators", "tokens.tokenId", "creators.tokenId"],
        limit: 3,
        order: ["created_at", "asc"],
      })
      timestamps = items.map((item) => {
        return item.created_at
      })
      assert(timestamps[0] < timestamps[1] && timestamps[1] < timestamps[2])
    })
    it('should create creators with signed:false when a new token is inserted', async () => {
      const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
      let beforeInsert = await rarebase.token.query({
        join: ["creators", "tokens.tokenId", "creators.tokenId"],
        where: {},
      })
      await rarebase.token.insert(token)
      let afterInsert = await rarebase.token.query({
        join: ["creators", "tokens.tokenId", "creators.tokenId"],
        where: {},
      })
      assert.equal(afterInsert.length, 11)
    })
    it('should update a creator to set the signed:true when a token is updated with an additional signature', async () => {
      let beforeInsert = await rarebase.token.query({
        join: ["creators", "tokens.tokenId", "creators.tokenId"],
        where: {},
      })
      assert(beforeInsert.length, 10)
      // signatures is made up of one 'null'
      const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":[null],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
      await rarebase.token.save(token)
      let afterInsert = await rarebase.token.query({
        join: ["creators", "tokens.tokenId", "creators.tokenId"],
        order: ["created_at", "desc"]
      })
      // creators has increased by one
      assert.equal(afterInsert.length, 11)
      // signed is false
      assert.equal(afterInsert[0].signed, false)

      // store with updated non null signature
      token.signatures[0] = "non null signature"
      await rarebase.token.save(token)

      let finalInsert = await rarebase.token.query({
        join: ["creators", "tokens.tokenId", "creators.tokenId"],
        order: ["created_at", "desc"]
      })
      // creators is the same
      assert.equal(finalInsert.length, 11)
      // signed is true
      assert.equal(finalInsert[0].signed, true)

    })
  })
  describe('tokens table', () => {
    describe("db functions", () => {
      it('should create all columns when saving', async () => {
        const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
        await rarebase.token.save(token)
        let columns = [
          "tokenId",
          "name",
          "description",
          "image",
          "type",
          "contract",
          "body",
          "created_at",
          "updated_at",
          "uri",
        ]

        let t = await rarebase.token.queryOne({
          where: { tokenId: token.tokenId }
        })

        assert(t)


        for(let column of columns) {
          assert(typeof t[column] !== "undefined")
        }
      })
      it('should not allow submissions without creators array', async () => {
        const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
        delete token.creators
        await assert.rejects(async () => {
          await rarebase.token.insert(token)
        }, (err) => {
          assert.equal(err.message, "creators doesn't exist")
          return true
        })
      })
      it('should NOT allow a token to not have a signatures array', async () => {
        const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
        delete token.signatures
        await assert.rejects(async () => {
          await rarebase.token.insert(token)
        }, (err) => {
          assert.equal(err.message, "signatures doesn't exist")
          return true
        })
      })
      it('should not work if all the values in the creators array dont add up to 10000', async () => {
        const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
        await assert.doesNotReject(async () => {
          await rarebase.token.insert(token)
        }, (err) => {
          return true
        })
        token.creators[0] = { account: "random account", value: 1000 }
        await assert.rejects(async () => {
          await rarebase.token.insert(token)
        }, (err) => {
          assert.equal(err.message, "all values in the creators array must add up to 10000")
          return true
        })
      })
      it('should allow null values in the signatures array', async () => {
        const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
        token.creators[0].value = 9000
        token.creators[1] = { account: "random account", value: 1000 }
        token.signatures[1] = null
        await assert.doesNotReject(async () => {
          await rarebase.token.insert(token)
        }, (err) => {
          return true
        })
      })
      it('should not allow all null values in the signatures array', async () => {
        const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
        token.creators[0].value = 9000
        token.creators[1] = { account: "random account", value: 1000 }
        token.signatures = [null, null]
        await assert.doesNotReject(async () => {
          await rarebase.token.insert(token)
        }, (err) => {
          return true
        })
      })
      it('should ensure that the signatures array must match the size of the creators array when it exists', async () => {
        const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
        token.signatures[1] = "random signature"
        await assert.rejects(async () => {
          await rarebase.token.insert(token)
        }, (err) => {
          assert.equal(err.message, "creators and signatures sizes don't match")
          return true
        })
      })
      it('should allow at least one signature in the signatures array', async () => {
        const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
        delete token.creators
        await assert.rejects(async () => {
          await rarebase.token.insert(token)
        }, (err) => {
          assert.equal(err.message, "creators doesn't exist")
          return true
        })
      })
      it('gets correctly', async () => {
        let token = await rarebase.token.queryOne({
          where: {
            tokenId: "52103307166765014994970427877263908096137622415883594758114461278185103294555"
          }
        })
        // tokenURI and uri are automatically attached before insertion, so must attach before comparing
        if (fixture[4].tokenURI) fixture[4].uri = fixture[4].tokenURI
        if (fixture[4].uri) fixture[4].tokenURI = fixture[4].uri
        assert.deepEqual(JSON.parse(token.body), fixture[4])
      })
      it('inserts correctly', async () => {
        const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
        await rarebase.token.insert(token)

        // get the inserted token and ensure that it matches what's inserted
        //let insertedToken = await rarebase.token.get({
        //  tokenId: "52103307166765014994970427877263908096137622415890450847723980612771990574979"
        //})


        let insertedToken = await rarebase.token.queryOne({
          where: {
            tokenId: "52103307166765014994970427877263908096137622415890450847723980612771990574979"
          }
        })

        assert.notEqual(insertedToken, null)
        if (token.tokenURI) token.uri = token.tokenURI
        if (token.uri) token.tokenURI = token.uri
        assert.deepEqual(JSON.parse(insertedToken.body), token)

        // get the latest token and ensure that it's equal to the inserted token
        let latestToken = await rarebase.token.queryOne({
          order: ["created_at", "desc"],
        })
        assert.deepEqual(insertedToken, latestToken)

      })
      it('ensures that the creators array has at least one item', async () => {
        // 1. insert
        const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
        token.creators = []
        token.signatures = []
        await assert.rejects(async () => {
          await rarebase.token.insert(token)
        }, (err) => {
          assert.equal(err.message, "there must be at least one item in the creators array")
          return true
        })
      })
      it('ensures that the signatures array is made up of either string or null', async () => {
        // 1. insert
        const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
        token.signatures[0] = 42
        await assert.rejects(async () => {
          await rarebase.token.insert(token)
        }, (err) => {
          assert.equal(err.message, "the signatures array must contain either string or null values")
          return true
        })
        
      })
      it('merges signatures into existing signatures correctly when updated', async () => {
        // 1. insert
        const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
        token.creators[0].value = 5000
        token.creators[1] = { account: "random account", value: 5000 }
        token.signatures[1] = null
        await rarebase.token.insert(token)
        
        // 2. call "store" with the same tokenId with additional signature
        token.creators.value = 5000
        token.signatures[1] = "random signature"
        await rarebase.token.save(token)

        // 3. get the token and check the signature
        let updatedToken = await rarebase.token.queryOne({
          where: {
            tokenId: "52103307166765014994970427877263908096137622415890450847723980612771990574979"
          }
        })
        assert.equal(JSON.parse(updatedToken.body).signatures[1], "random signature")
      })

      it('ensures that creating a token creates entries in the creators table', async () => {
        await rarebase.knex("creators").del()
        await rarebase.knex("trades").del()
        await rarebase.knex("tokens").del()
        const token = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415890450847723980612771990574979","uri":"/ipfs/bafkreibiwwakbjd2shntolk3xubmzimvmqmhomjbhi4wckmdxei7pysqxq","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[{"account":"0x73316d4224263496201c3420b36cdda9c0249574","value":1000}],"signatures":["0xd37a0fcbe12f556a724800395af85d50d7eeca172c1d85c5f6a20f76f112001e4e222fb20eaaeb72cc67432f97cd05ef5d098f127c30ffd3f33869ed310ca4271b"],"metadata":{"name":"monkey","description":"what?","image":"/ipfs/bafybeiau2pjpoyxsf546k6yex2jwgje5iifihn7oxmaag62wept5yk75zy","attributes":[{"trait_type":"Date Created","value":"Tue, 27 Jul 2021 14:47:58 GMT"},{"trait_type":"Powered By","value":"Rarepress https://rarepress.org"}]}}
        await rarebase.token.insert(token)
        let items = await rarebase.query.query({
          from: "creators",
        })
        assert.equal(items.length, 1)
      })
    })
    describe('utility functions', () => {
      describe('normalize', () => {
        it('should normalize creator address correctly', () => {
          const item = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415883594758114461278185103294502","uri":"/ipfs/bafkreiewliasw2ytqr37b5e3zfh4cx5zkwvavxxhf2kzzawlg7cscn4gem","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316D4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[],"signatures":["0x6bcd1e2e3c067bee9943aee1aa8cedce52d8b29405e0974f3a8d08498717aa176b0b5a8f20ad1762606405bd478a7843955466a9763f55f7db66e649d5780a721b"],"metadata":{"name":"a.svg","description":"a.svg","image":"/ipfs/bafybeid3ymks5gvefy4ekmthwrqwa6ga273qqddnxawmg5aimm73gmesym/a.svg"}}
          let preserved = JSON.parse(JSON.stringify(item))
          let normalized = rarebase.token.normalize(item)
          assert.notEqual(normalized.creators[0].account, preserved.creators[0].account)
          assert.equal(normalized.creators[0].account, preserved.creators[0].account.toLowerCase())
        })
        it('should normalize tokenURIs correctly', () => {
          const item = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415883594758114461278185103294502","uri":"/ipfs/bafkreiewliasw2ytqr37b5e3zfh4cx5zkwvavxxhf2kzzawlg7cscn4gem","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316D4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[],"signatures":["0x6bcd1e2e3c067bee9943aee1aa8cedce52d8b29405e0974f3a8d08498717aa176b0b5a8f20ad1762606405bd478a7843955466a9763f55f7db66e649d5780a721b"],"metadata":{"name":"a.svg","description":"a.svg","image":"/ipfs/bafybeid3ymks5gvefy4ekmthwrqwa6ga273qqddnxawmg5aimm73gmesym/a.svg"}}
          let preserved = JSON.parse(JSON.stringify(item))
          let normalized = rarebase.token.normalize(item)
          assert.equal(preserved.tokenURI, undefined)
          assert.equal(normalized.tokenURI, normalized.uri)
        })
      })
      describe('validateDiff', () => {
        it("should detect if an attribute's value has changed", () => {
          const verifier = (attr, item, stub) => {
            return new Promise((resolve, reject) => {
              assert.throws(() => {
                rarebase.token.validateDiff(item, stub)
              }, (err) => {
                assert.equal(err.message, `${attr} has changed`)
                resolve()
                return true
              })
            })
          }
          const item = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415883594758114461278185103294502","uri":"/ipfs/bafkreiewliasw2ytqr37b5e3zfh4cx5zkwvavxxhf2kzzawlg7cscn4gem","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316D4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[],"signatures":["0x6bcd1e2e3c067bee9943aee1aa8cedce52d8b29405e0974f3a8d08498717aa176b0b5a8f20ad1762606405bd478a7843955466a9763f55f7db66e649d5780a721b"],"metadata":{"name":"a.svg","description":"a.svg","image":"/ipfs/bafybeid3ymks5gvefy4ekmthwrqwa6ga273qqddnxawmg5aimm73gmesym/a.svg"}}
          let attributes = ["@type", "uri", "tokenId", "tokenURI", "contract", "supply"]
          for(let attr of attributes) {
            let stub = JSON.parse(JSON.stringify(item))
            stub[attr] = "tampered"
            verifier(attr, item, stub)
          }
        })
      })
      describe('validate', () => {
        it('should validate if a mandatory attribute doesnt exist', async () => {
          const item = {"@type":"ERC721","tokenId":"52103307166765014994970427877263908096137622415883594758114461278185103294502","uri":"/ipfs/bafkreiewliasw2ytqr37b5e3zfh4cx5zkwvavxxhf2kzzawlg7cscn4gem","contract":"0x6ede7f3c26975aad32a475e1021d8f6f39c89d82","creators":[{"account":"0x73316D4224263496201c3420b36cdda9c0249574","value":10000}],"royalties":[],"signatures":["0x6bcd1e2e3c067bee9943aee1aa8cedce52d8b29405e0974f3a8d08498717aa176b0b5a8f20ad1762606405bd478a7843955466a9763f55f7db66e649d5780a721b"],"metadata":{"name":"a.svg","description":"a.svg","image":"/ipfs/bafybeid3ymks5gvefy4ekmthwrqwa6ga273qqddnxawmg5aimm73gmesym/a.svg"}}
          const attributes = ["metadata", "@type", "uri", "tokenId", "tokenURI", "contract"]
          const verifier = (attr, stub) => {
            return new Promise((resolve, reject) => {
              assert.throws(() => {
                rarebase.token.validate(stub)
              }, (err) => {
                assert.equal(err.message, `${attr} doesn't exist`)
                resolve()
                return true
              })
            })
          }
          for(let attr of attributes) {
            let stub = JSON.parse(JSON.stringify(item))
            delete stub[attr]
            verifier(attr, stub)
          }
        })
      })
    })
  })
});

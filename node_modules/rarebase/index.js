const sigUtil = require('eth-sig-util')
const fs = require('fs')
const path = require('path')
const Knex = require('knex')
const Query = require("./query")
const Token = require("./token")
const Trade = require("./trade")
class Rarebase {
  /*********************************************************
  *
  *  // SQLITE3 SIMPLE
  *  await rarebase.init({
  *    client: 'sqlite3',
  *  })
  *  // PGSQL SIMPLE
  *  await rarebase.init({
  *    client: 'postgresql',
  *    connection: {
  *      host: <ip>,
  *      database: 'rarebase',
  *      user:     'username',
  *      password: 'password'
  *    }
  *  })

  *  // SQLITE3 ADVANCED
  *  await rarebase.init({
  *    client: 'sqlite3',
  *    connection: {
  *      filename: './rarebase.sqlite3'
  *    },
  *    useNullAsDefault: true
  *  })
  *  // PGSQL ADVANCED
  *  await rarebase.init({
  *    client: 'postgresql',
  *    connection: {
  *      host: <ip>,
  *      database: 'rarebase',
  *      user:     'username',
  *      password: 'password'
  *    },
  *    pool: {
  *      min: 2,
  *      max: 10
  *    },
  *  })
  *
  *********************************************************/
  async init(o) {
    // sqlite initialization
    if (!o || o.client === "sqlite3") {
      let storePath = (o && o.connection && o.connection.filename ? path.dirname(o.connection.filename) : process.cwd())
      await fs.promises.mkdir(storePath, { recursive: true }).catch((e) => { })
      o.useNullAsDefault = true
      o.connection = {
        filename: path.resolve(storePath, "rarebase.sqlite3")
      }
    }
    o.migrations = {
      tableName: 'knex_migrations',
      directory: __dirname + '/migrations'
    }
    const knex = Knex(o)
    await knex.migrate.latest()
    this.knex = knex
    this.query = new Query(knex)
    this.token = new Token(knex, this.query)
    this.trade = new Trade(knex, this.query)
  }
}
module.exports = Rarebase

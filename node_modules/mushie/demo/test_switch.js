const sigUtil = require('eth-sig-util')
const priv2addr = require('ethereum-private-key-to-address')
const mushie = require('../index');
(async () => {
  const maker = await mushie.maker()
  const alice = await maker.make({
    key: "m'/44'/60'/0'/0/0",
    init: async (mushie) => {
      console.log("setting the address")
      console.log("mushie.address before = ", mushie.address)
      console.log("mushie.path before = ", mushie.path)
      mushie.address = await mushie.ethereum.request({
        method: "eth_requestAccounts"
      }).then((r) => {
        return r[0]
      })
      console.log("mushie.address", mushie.address)
    },
    use: {
      ethereum: (key) => {
        return {
          request: async (o) => {
            if (o.method === "eth_signTypedData_v4") {
              return sigUtil.signTypedData_v4(key.privateKey, { data: JSON.parse(o.params[1]) });
            } else if (o.method === "personal_sign") {
              return sigUtil.personalSign(key.privateKey, { data: o.params[1] });
            } else if (o.method === "eth_requestAccounts") {
              return [priv2addr(key.privateKey)]
            }
          }
        }
      },
    }
  })
  console.log("alice address = ", alice.address)
  await alice.switch("m'/44'/60'/0'/0/1")
  console.log("alice2 address = ", alice.address)
})();
